import java.util.Collection;
import java.util.List;
import java.util.ListIterator;

public class DoubleLinkedList<E> {
	
	Iterator<E> it = new Iterator<>() ;
	
	private Node mHead = null ;
	private E mData ;
	
	
	public DoubleLinkedList() {
		mHead = null ;
	}
	
	//======================================================================
	//				DOUBLE LINKED LIST FUNCTIONS
	//======================================================================
	
	/**
	 * Returns an iterator over the elements in this list in proper sequence.
	 */
	public Iterator<E> iterator() {
		return null;
	}
	/**
	 * Returns a list iterator over the elements in this list (in proper sequence).
	 */
	public ListIterator<E> listIterator() {

		return null;
	}
	/**
	 * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.
	 */
	public ListIterator<E> listIterator(int index) {
		return null;
	}
	/**
	 * Appends the specified element to the end of this list (optional operation).
	 */
	public boolean add(E e) {
		return add(size(),e);
	}
	/**
	 * Inserts the specified element at the specified position in this list (optional operation).
	 * @param index
	 * @param element
	 */
	public boolean add(int index, E element) {

        if (index < 0 || index > size())
            throw new IndexOutOfBoundsException("Index must be between 0 and " + size());
            
        Node current = mHead;

        for (int i = 0; i < index - 1; i++)
            current = current.mNext; // This will be the node right before the insertion idx
        
        if (index == 0) 
            mHead = new Node(element,mHead,null);
        else
        	current.mNext = new Node(element,current.mNext, current) ;
        return true;
	}
	/**
	 * Removes all of the elements from this list (optional operation).
	 */
	public void clear() {
		mHead = null ;
	}
	/**
	 * Compares the specified object with this list for equality.
	 */
	@Override
	public boolean equals(Object e) {
		return false ;
	}
	/**
	 * Returns true if this list contains the specified element.
	 */
	public boolean contains(Object o) {
		Node current = mHead ;
		
		while(current != null) {
			
			if (current.mData.equals((E)o)) {
				return true ;
			}
			current = current.mNext ;
		}
		
		return false;
	}
	/**
	 * Returns the element at the specified position in this list.
	 */
	public Object get(int index) {
		
        if (index < 0 || index > size())
            throw new IndexOutOfBoundsException("Index must be between 0 and " + size());
        
		Node current = mHead ;
		
		for (int i = 0 ; i < index ; i++)
			current = current.mNext ;
		
		return current.mData;
	}
	/**
	 * Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
	 */
	public int indexOf(Object o) {
        Node current = mHead;
        int listSize = size();
        
        for (int i = 0; i < listSize; i++){
            if (current.mData.equals((E) o))
                return i;
            current = current.mNext;
        }
        return -1;
	}
	/**
	 * Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
	 */
	public int lastIndexOf(Object o) {
		
		int lastIdx = -1 ;
		Node current = mHead ;
		
		if (!contains(o))
			return lastIdx ;
		else {
			int idx = 0 ;
			while(current != null) {
				if (current.mData.equals((E)o))
					lastIdx = idx ;
				current = current.mNext ;
				idx++ ;
			}
		}
		return lastIdx ;
	}
	/**
	 * 	Returns true if this list contains no elements.
	 */
	public boolean isEmpty() {
		return mHead == null;
	}
	/**
	 * Removes the element at the specified position in this list (optional operation).
	 */
	public Object remove(int index) {
		
		if (index < 0 || index >= size())
            throw new IndexOutOfBoundsException("Index must be between 0 and " + size());

        Node current = mHead;
        
        for (int i = 0; i < index - 1; i++)
            current = current.mNext;

        Node temp = current.mNext;

        if (index == 0) {
        	mHead = mHead.mNext ;
        	mHead.mPrev = null ;
        } else {       
        	current.mNext = current.mNext.mNext ;
        	if (current.mNext != null)
        		current.mNext.mPrev = current ;
        }
        return temp.mData;
	}
	/**
	 * Removes the first occurrence of the specified element from this list, if it is present (optional operation).
	 */
	public boolean remove(Object o) {
		
		int index = indexOf(o) ;
		if (index < 0)
			return false ;
		remove(index) ;
		return true ;
	}
	/**
	 * 	Replaces the element at the specified position in this list with the specified element (optional operation).
	 * @param index
	 * @param element
	 * @return
	 */
	public Object set(int index, E element) {
		
		Object old ;
		Node current = mHead ;
		
        if (index < 0 || index > size())
            throw new IndexOutOfBoundsException("Index must be between 0 and " + size());
        
    	for (int i = 0 ; i < index ; i++) {
    		current = current.mNext ;
    	}
    	
    	old = current.mData ;
    	current.mData = element ;
       
		return old;
	}
	/**
	 * Returns the number of elements in this list.
	 */
	public int size() {
		
		if (mHead == null)
			return 0 ;
		
		int count = 1 ;
		
		Node current = mHead ;
		
		while (current.mNext != null) {
			current = current.mNext ;
			count++ ;
		}
		
		return count ;
	}	
	/**
	 * Returns a formatted output of the LinkedList
	 */
	@Override
	public String toString() {
		
		Node current = mHead ;
		StringBuilder out = new StringBuilder() ;
		
		if (current == null)
			return "" ;
		
		while (current != null) {
			out.append(current.mData) ;
			current = current.mNext ;
		}
		
		return out.toString() ;
	}
	
	//======================================================================
	//						NESTED CLASSES
	//======================================================================
	private static class Node<E> {
		
		private Node<E> mPrev ,mNext  ;
		private E mData ;
		
		//Constructor
		public Node(E data) {
			mData = data ;
			mPrev = null ;
			mNext = null ;
		}
		public Node(E data, Node next, Node prev) {
			mData = data ;
			mNext = next ;
			mPrev = prev ;
		}
		
	}//End Node Class
	private class Iterator<E> implements ListIterator{	
			
		Node mPrev,mNext ;
		int mCursor, mLastIndex ;
		
		public Iterator() {
			mPrev = null ;
			mNext = mHead.mNext ;
			mCursor = 0 ;
		}
		/**
		 * Returns true if this list iterator has more elements when traversing the list in the forward direction.
		 * @Override
		 */
		public boolean hasNext() {
			return mNext != null;
		}

		/**
		 * Returns the next element in the list and advances the cursor position.
		 * @Override
		 */
		public E next() {
			mLastIndex = mCursor++ ;
			mPrev = mPrev.mNext ;
			mNext = mNext.mNext ;
			return (E) mNext ;
		}

		
		/**
		 * Returns true if this list iterator has more elements when traversing the list in the reverse direction.
		 * @Override
		 */
		public boolean hasPrevious() {
			return mPrev != null ;
		}

		
		/**
		 * Returns the previous element in the list and moves the cursor position backwards.
		 * @Override
		 */
		public E previous() {
			mNext = mNext.mPrev ;
			mPrev = mPrev.mPrev ;
			return (E) mPrev ;
		}

		
		/**
		 * Returns the index of the element that would be returned by a subsequent call to next().
		 * @Override
		 */
		public int nextIndex() {
			return mCursor + 1 ;
		}

		
		/**
		 * Returns the index of the element that would be returned by a subsequent call to previous().
		 * @Override
		 */
		public int previousIndex() {
			return mCursor -1 ;
		}

		
		/**
		 * Removes from the list the last element that was returned by next() or previous() (optional operation).
		 * @Override
		 */
		public void remove() {
			DoubleLinkedList.this.remove(mLastIndex) ;
			
		}

		
		/**
		 * 	Replaces the last element returned by next() or previous() with the specified element (optional operation).
		 * @Override
		 */
		public void set(Object e) {
			DoubleLinkedList.this.set(mLastIndex, (E)e) ;
			
		}

		
		/**
		 * Inserts the specified element into the list (optional operation).
		 * @Override
		 */
		public void add(Object e) {
			DoubleLinkedList.this.add((E) e) ;
				
		}
			
			
	}//End Iterator Class

}
