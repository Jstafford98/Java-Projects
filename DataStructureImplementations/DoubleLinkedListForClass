import java.util.*;


public class DoubleLinkedList<E> extends AbstractSequentialList<E>
{  // Data fields
    	private Node<E> head = null;   // points to the head of the list
    	private Node<E> tail = null;   //points to the tail of the list
    	private int size = 0;    // the number of items in the list
  
  public void add(int index, E obj)
  { 
	  if (index < 0 || index > size())
          throw new IndexOutOfBoundsException("Index must be between 0 and " + size());
          
	  ListIterator<E> iter = listIterator(index) ;
	  iter.add(obj) ;
      size++ ;
   }
  public void addFirst(E obj) {
	  add(0,obj) ;
  }
  public void addLast(E obj) { 
	  add(size-1,obj) ;
  }

  public E get(int index) 
  { 	ListIterator<E> iter = listIterator(index); 
      	return iter.next();
  }  
  public E getFirst() { 
	  return head.data;  
  }
  public E getLast() { 
	  return tail.data;  
  }

  public int size() { 
	  if (head == null)
			return 0 ;
		
		int count = 1 ;
		
		Node current = head ;
		
		while (current.next != null) {
			current = current.next ;
			count++ ;
		}
		
		return count ;
  }

  public E remove(int index)
  {     E returnValue = null;
        ListIterator<E> iter = listIterator(index);
        if (iter.hasNext()){
        	returnValue = iter.next();
            iter.remove();
        } else {   
        	throw new IndexOutOfBoundsException();  
        }
        return returnValue;
  }

  public Iterator iterator() {
	  return new ListIter(0);  
  }
  public ListIterator listIterator() {
	  return new ListIter(0);  
  }
  public ListIterator listIterator(int index){
	  return new ListIter(index);
  }
  public ListIterator listIterator(ListIterator iter){     
	  return new ListIter( (ListIter) iter);  
  }

//======================================================================
//								NODE
//======================================================================
  private static class Node<E>
  {     private E data;
        private Node<E> next ;
        private Node<E> prev ;

        private Node(E dataItem){ 
        	this(dataItem,null,null) ;
        }
        private Node(E dataItem,Node next, Node prev) {
        	data = dataItem ;
        	this.next = next ;
        	this.prev = prev ;
        }
  }  // end class Node

  
//======================================================================
//								ListIter
//======================================================================
  public class ListIter implements ListIterator<E> 
  {
        private Node<E> nextItem;      // the current node
        private Node<E> lastItemReturned;   // the previous node
        private int index = 0;   // 

    public ListIter(int i) {  // constructor for ListIter class
        if (i < 0 || i > size)     
    		throw new IndexOutOfBoundsException("Invalid index " + i); 
    	
        lastItemReturned = null;
 
        if (i == size)     // Special case of last item
        {     index = size;     nextItem = null;      }
        else          // start at the beginning
        {   nextItem = head;
            for (index = 0; index < i; index++)  nextItem = nextItem.next;   
        }// end else
    }  // end constructor

    public ListIter(ListIter other){   
    	nextItem = other.nextItem;
        index = other.index;
        lastItemReturned = null ;
    }
    public boolean hasNext() {   
    	return nextItem.next != null ;    
    } 
    public boolean hasPrevious(){   
    	return nextItem.prev != null ;   
    }
    public int previousIndex() {  
    	return index-1 ;   
    } 
    public int nextIndex() {  
    	return index+1;    
    }
    public void set(E o) { 
    	nextItem.data = (E) o ;
    }
    public void remove(){
    	
    }
    public E next(){  
    	lastItemReturned = nextItem ;
    	nextItem = nextItem.next ;
        return lastItemReturned.data; 
    }
    public E previous(){ 	
    	lastItemReturned = nextItem ;
    	nextItem = nextItem.prev ;
    	return lastItemReturned.data; 
    }
    public void add(E obj) {
    	tail.next = new Node(obj,null,tail) ;
    	tail = tail.next ;
    }
  }// end of inner class ListIter
}// end of class DoubleLinkedList
