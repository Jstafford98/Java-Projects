import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;

/**
 * @author Jordan Stafford
 */
public class DoubleLinkedList<E> implements List<E> {
	
	Node<E> head = null ,tail = null ;
	int size = 0 ;
	
	//Double LinkedList functions
	/**Creates a Iterator object at the start of the list
	 * @return an MyIter object
	 */
	public Iterator iterator(){
		return new MyIter() ;
	}
	/**Creates an iterator object at the start of the list
	 * @return a MyIter object
	 */
	public MyIter listIterator(){
		return new MyIter() ;
	}
	/**Creates a listIterator object at a given index
	 * @index the index to put the listIterator at
	 * @return a MyIter object
	 */
	public MyIter listIterator(int index){
		return new MyIter(index) ;
	}
	/**Inserts the specificed element after the next element
	 * @param e - the value to insert
	 */
	public boolean add(E e) {
		listIterator(size).add(e) ;
		return true ;
	}
	/**Inserts the specified element at the specified position in this list (optional operation).
	 * @param index - the index to insert e at
	 * @param e - the value to insert
	 */
	public void add(int index, E e) {
		listIterator(index).add(e) ;
	}
	/**Removes all of the elements from this list (optional operation).
	 * 
	 */
	public void clear() {
		head = null ;
		tail = null ;
		size = 0 ;
	}
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true ;
		}  else if (o instanceof DoubleLinkedList<?>) {
			DoubleLinkedList<E> other = (DoubleLinkedList<E>) o ;
			MyIter thisList = new MyIter(), otherList = new MyIter() ;
			while (thisList.hasNext() && otherList.hasNext()) {
				if (thisList.next() != otherList.next()) {
					return false ;
				}
			}
		}
		return true ;
	}
	/**Returns true if this list contains the specified element.
	 * @param o - the object we are looking for
	 * @return if object is in this list
	 */
	public boolean contains(Object o) {
		return indexOf(o) == -1 ? false : true ;
	}
	/**Returns the element at the specified position in this list.
	 * @param index - the index to get
	 * @return the object at index
	 */
	public E get(int index) {
		if (index >= size)
			throw new IndexOutOfBoundsException() ;
		return listIterator(index).next() ;
	}
	/**Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
	 * @param o - object we are looking for
	 * @return index of object
	 */
	public int indexOf(Object o) {
		MyIter itr = new MyIter() ;
		E other = (E) o ;
		int idx = 0, foundIdx = -1 ;
		while (itr.hasNext()) {
			 if (itr.next().equals(other)) {
				 foundIdx = idx ;
				 break ;
			 }
			 idx++ ;
		}
		return foundIdx ;
	}
	/**	Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
	 * @param o - object we are looking for
	 * @return - index of object
	 */
	public int lastIndexOf(Object o) {
		MyIter itr = new MyIter() ;
		E other = (E) o ;
		int foundIdx = -1, idx = 0 ;
		while (itr.hasNext()) {
			 if (itr.next().equals(other)) {
				 foundIdx = idx ;
				 idx++ ;
				 continue ;
			 }
			 idx++ ;
		}
		return foundIdx  ;
	}
	/**	Returns true if this list contains no elements.
	 * @return if list contains no elements
	 */
	public boolean isEmpty() {
		return head == null ;
	}
	/**Removes the element at the specified position in this list (optional operation).
	 * @param index - index to remove
	 * @return the object that was removed
	 */
	public E remove(int index) {
		if (index < 0 || index >= size)
			throw new IndexOutOfBoundsException() ;
		MyIter itr = new MyIter(index) ;
		E tmp = (E) itr.next() ;
		itr.remove() ;
		return tmp ;
	}
	/**Removes the first occurrence of the specified element from this list, if it is present (optional operation).
	 * @param o - object we are looking for
	 * @return the boolean return whether or not the object was removed
	 */
	public boolean remove(Object o) {
		int idx = indexOf(o) ;
		if (idx != -1) {
			remove(idx) ;
			return true ;
		}
		return false ;
	}
	/** Replaces the element at the specified position in this list with the specified element (optional operation).
	 * @param index - index of the value to set
	 * @param element - element to set the value to
	 * @return the old value
	 */
	public E set(int index,E element) {
		if (index < 0 || index >= size)
			throw new IndexOutOfBoundsException() ;
		MyIter itr = new MyIter(index) ;
		E tmp = (E) itr.next() ;
		itr.set(element) ;
		return tmp ;
	}
	/**	Returns the number of elements in this list.
	 * @return the size of this list
	 */
	public int size() {
		return size ;
	}
	@Override
	public String toString() {
		String prefix = "" ;
		StringBuilder output = new StringBuilder();
		MyIter itr = new MyIter() ;
		output.append("[") ;
		while (itr.hasNext()) {
			E nxt = itr.next() ;
			if (nxt != null) {
				output.append(prefix) ;
				prefix = ", " ;
				output.append(nxt.toString()) ;
			}
		}
		output.append("]") ;
		return output.toString() ;
	}
	
	
	//Nested Classes
	static class Node<E> {
		
		Node<E> previous, next ;
		E data ;
		
		/** Creates a new node
		 * @param data - the data the new node will store
		 */
		Node(E data){
			this.data = data ;
			previous = null ;
			next = null ;
		}
		/**
		 * @param data - the data the new node will store
		 * @param prev - the previous node before this new node
		 * @param nxt - the node after this node
		 */
		Node(E data, Node<E> prev, Node<E> nxt){
			this.data = data ;
			previous = prev ;
			next = next ;
		}
	}
	class MyIter implements ListIterator<E> {
		
		
		private int cursor ;
		private boolean movingForward ;
		private DoubleLinkedList.Node<E> nextNode;
		private DoubleLinkedList.Node<E> lastReturned ;
		
		/** Creates an iterator at the start of the list
		 * 
		 */
		MyIter(){
			this(0) ;
		}
		/** Creates an iterator a given index
		 * @param index - the index to put the iterator between
		 */
		MyIter(int index){
			
			//Validate index
			if (index < 0 || index > size) {
				throw new IndexOutOfBoundsException("Invalid Index " + index) ;
			}
			
			lastReturned = null ;
			movingForward = true ;
			
			if (index == size) {
				this.cursor = size ;
				nextNode = null ;
			} else {
				nextNode = head ;
				for (cursor = 0 ; cursor < index ; cursor++)
					if (nextNode != null)
						nextNode = nextNode.next ;
			}
		}
		
		/** Inserts the specified element into the list (optional operation).
		 * @param e - the element to insert
		 */
		public void add(E e) {
			//Add to Empty List
			if (head == null) {
				head = new Node<E>(e) ;
				tail = head ;
			}
			//Add to head
			else if (nextNode == head) {
				Node<E> newNode = new Node<E>(e) ;
				newNode.next = nextNode ;
				nextNode.previous = newNode ;
				head = newNode ;
			}
			//Add to tail
			else if (nextNode == null) {
				Node<E> newNode = new Node<E>(e) ;
				tail.next = newNode ;
				newNode.previous = tail ;
				tail = newNode ;
			}
			//Add to middle
			else {
				Node<E> newNode = new  Node<E>(e) ;
				newNode.previous = nextNode.previous ;
				nextNode.previous.next = newNode ;
				newNode.next = nextNode ;
				nextNode.previous = newNode ;
			}
			
			size++ ;
			cursor++ ;
			lastReturned = null ;
			
		}
		/**Returns true if this list iterator has more elements when traversing the list in the forward direction.
		 * @return - boolean representing if there is a next value
		 */
		public boolean hasNext() {
			return nextNode != null ;
		}
		/**Returns true if this list iterator has more elements when traversing the list in the reverse direction.
		 * @return - boolean representing if there is a previous value
		 */
		public boolean hasPrevious() {
			return (nextNode != null || size > 0) && (nextNode == null || nextNode.previous != null) ;
		}
		/**Returns the next element in the list and advances the cursor position.
		 * @return - the next element to return
		 */
		public E next() {
			if (!hasNext())
				throw new NoSuchElementException() ;
			lastReturned = nextNode ;
			nextNode = nextNode.next ;
			cursor++ ;
			movingForward = true ;
			return lastReturned.data ;
		}
		/**Returns the index of the element that would be returned by a subsequent call to next().
		 * @return - the next index
		 */
		public int nextIndex() {
			return cursor ;
		}
		/**Returns the previous element in the list and moves the cursor position backwards.
		 * @return - the previous element in the list
		 */
		public E previous() {
			if(!hasPrevious())
				throw new NoSuchElementException() ;
			if (nextNode == null) 
				nextNode = tail ;
			else
				nextNode = nextNode.previous ;
			lastReturned = nextNode ;
			cursor-- ;
			movingForward = false ;
			if (lastReturned == null)
				return tail.data ;
			
			return lastReturned.data ;
		}
		/**Returns the index of the element that would be returned by a subsequent call to previous().
		 * @return - the index of the next call to previous
		 */
		public int previousIndex() {
			return cursor - 1 ;
		}
		/**Removes from the list the last element that was returned by next() or previous() (optional operation).
		 * 
		 */
		public void remove() {
			
			if (lastReturned == null)
				throw new IllegalStateException() ;
			//lastReturned was the head
			if (lastReturned == head) {
				head = head.next ;
			}
			//Tail
			else if (nextNode == null) {
				tail = tail.previous ;
				tail.next = null ;
			}
			//else if going forward
			else if (movingForward && (nextNode != null)) {
				if (nextNode.previous.previous != null) {
					nextNode.previous = nextNode.previous.previous ;
					nextNode.previous.next = nextNode ;
				}
				
			}
			//else if going backwards
			else {
				if (nextNode.next != null) {
					nextNode.next.previous = nextNode.previous ;
					nextNode.previous.next = nextNode.next ;
				} else {

					tail = nextNode.previous ;
					tail.previous.next = tail ;
					tail.next = null ;
				}
					
			}
			size-- ;
		}
		/**Replaces the last element returned by next() or previous() with the specified element (optional operation).
		 * @param e - the element to replace the last returned element with
		 */
		public void set(E e) {
			if (lastReturned == null)
				throw new IllegalStateException() ;
			lastReturned.data = e ;
		}
	}
	
	
	//Unemplemented Functions
	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public Object[] toArray(Object[] a) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean containsAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public boolean addAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public boolean addAll(int index, Collection c) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public boolean removeAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public boolean retainAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public List subList(int fromIndex, int toIndex) {
		return null;
	}
}
