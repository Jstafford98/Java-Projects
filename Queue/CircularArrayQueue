import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Queue;

public class CircularArrayQueue<E> implements Queue<E> {
	
	private static final int DEFAULT_CAPACITY = 5 ;
	
	E[] theQueue ;
	int front, back, size, capacity ;
	
	/** Creates a new CircularArrayQueue object
	 * 
	 */
	public CircularArrayQueue() {
		this(DEFAULT_CAPACITY) ;
	}
	/**
	 * Creates a new CircularArrayQueue object of a given capacity
	 * @param capacity - the capacity of the queue
	 */
	public CircularArrayQueue(int capacity) {
		theQueue = (E[]) new Object[capacity] ;
		this.capacity = capacity ;
		size = 0 ;
		front = -1 ;
		back = -1 ;
	}
	@Override
	public boolean add(E e) {
		if (front == -1) {
			front = 0 ;
			size = 1 ;
		}
		if (size == capacity)
			reallocate() ;
		else if (back == capacity-1)
			theQueue[(++back%capacity)] = e ;
		else
			theQueue[++back] = e ;
		size++ ;
		return true;
	}
	@Override
	public E element() {
		if (front == -1)
			throw new NoSuchElementException() ;
		return theQueue[front];
	}
	@Override
	public boolean offer(E e) {
		System.out.println("Attempting to offer " + e);
		if (front == -1)
			front = 0 ;
		else if (size == capacity)
			reallocate() ;
		else if (back == capacity-1) {
			theQueue[(++back%capacity)] = e ;
			size++ ;
			return true ;
		}
		theQueue[++back] = e ;
		size++ ;
		return true;
	}
	@Override
	public E peek() {
		if (front == -1)
			return null ;
		return theQueue[front];
	}
	@Override
	public E poll() {
		if (front == -1) 
			return null ;
		else if (size == 1) {
			E out = theQueue[front] ;
			theQueue[front] = null ;
			front = -1 ;
			back = -1 ;
			size = 0 ;
			return out ;
		}
		return removeAndShift(front) ;
	}
	@Override
	public E remove() {
		if (front == -1)
			throw new NoSuchElementException() ;
		else if (size == 1) {
			E out = theQueue[front] ;
			theQueue[front] = null ;
			front = -1 ;
			back = -1 ;
			size = 0 ;
			return out ;
		}
	 	return removeAndShift(front) ;
	}
	@Override 
	public String toString() {
		StringBuilder output = new StringBuilder() ;
		for (int i = front ; i < capacity ; i++){
			if (i >= capacity-1) {
				output.append("\nIndex: " + i % capacity + ": " + theQueue[(i % capacity)]) ;
			}else { 
				output.append("\nIndex: " + i + ": " + theQueue[i]) ;
			}
			//if (i != capacity -1)
			//	output.append(", ") ;
		}
		return output.toString() ;
	}
	private void reallocate(){
		capacity *= 2 ;
		E[] newQueue = (E[]) new Object[capacity] ;

		for (int i = front ; i < size ; i++) {
			if (i >= capacity) {
				newQueue[(i % capacity)-1] = theQueue[(i%capacity)-1] ;
				continue ;
			}
			newQueue[i] = theQueue[i] ;
		}
		theQueue = newQueue ;
	}
	private E removeAndShift(int idx) {
		E out = theQueue[idx] ;
		if (size == 1) {
			front = -1 ;
			back = -1 ;
			size = 0 ;
			return out ;
		}
		theQueue[idx++] = null ;
		front = idx ;
		return out ;
	}

	//Unimplemented Methods

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean contains(Object o) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Iterator iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray(Object[] a) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean remove(Object o) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean addAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean retainAll(Collection c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}	
	
}
